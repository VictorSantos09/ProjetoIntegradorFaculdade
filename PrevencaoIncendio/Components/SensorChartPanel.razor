@using PrevencaoIncendio.Caching
@using PrevencaoIncendio.Config.Graphic
@using Radzen
@using Radzen.Blazor

@inject IDatabase Cache
@inject IValoresRepository ValoresRepository
@inject GraphicParameters GraphicParameters

<RadzenStack Orientation="Orientation.Vertical" Gap="2rem" class="rz-p-8 rz-p-md-6 rz-p-lg-12">

    <RadzenCard Variant="Variant.Outlined" Class="rz-p-4 rz-mb-4">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" Gap="1rem">
            <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels" />
            <RadzenLabel Text="Mostrar rótulos nos pontos" Component="dataLabels" />

            <RadzenCheckBox @bind-Value="@showMarkers" Name="markers" />
            <RadzenLabel Text="Mostrar marcadores" Component="markers" />
        </RadzenStack>
    </RadzenCard>

    <!-- Gráfico 1: Temperatura e Umidade -->
    <div>
        <h3>Temperatura e Umidade</h3>
        <RadzenChart>
            <RadzenLineSeries Data="@ProcessedData" CategoryProperty="Hora" ValueProperty="Temperatura" Title="Temperatura (°C)">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Diamond" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>

            <RadzenLineSeries Data="@ProcessedData" CategoryProperty="Hora" ValueProperty="Umidade" Title="Umidade (%)">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Diamond" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>

            <RadzenValueAxis>
                <RadzenAxisTitle Text="Valores" />
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>

            <RadzenCategoryAxis>
                <RadzenGridLines Visible="true" />
            </RadzenCategoryAxis>

            <RadzenChartTooltip />
        </RadzenChart>
    </div>

    <!-- Gráfico 2: Fogo e Monóxido Detectado -->
    <div>
        <h3>Fogo e Monóxido Detectado</h3>
        <RadzenChart Style="height: 300px;">
            <RadzenLineSeries Data="@ProcessedData" CategoryProperty="Hora" ValueProperty="FogoDetectado" Title="Fogo Detectado">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Triangle" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>

            <RadzenLineSeries Data="@ProcessedData" CategoryProperty="Hora" ValueProperty="Co" Title="Monóxido Detectado">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Triangle" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>

            <RadzenValueAxis>
                <RadzenAxisTitle Text="Detectado (0 = Não, 1 = Sim)" />
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>

            <RadzenCategoryAxis>
                <RadzenGridLines Visible="true" />
            </RadzenCategoryAxis>

            <RadzenChartTooltip />
        </RadzenChart>
    </div>

    <!-- Gráfico 3: PPM -->
    <div>
        <h3>PPM MQ2</h3>
        <RadzenChart Style="height: 300px;">
            <RadzenLineSeries Data="@ProcessedData" CategoryProperty="Hora" ValueProperty="PPM" Title="PPM MQ2">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
            </RadzenLineSeries>

            <RadzenValueAxis>
                <RadzenAxisTitle Text="PPM" />
                <RadzenGridLines Visible="true" />
            </RadzenValueAxis>

            <RadzenCategoryAxis>
                <RadzenGridLines Visible="true" />
            </RadzenCategoryAxis>

            <RadzenChartTooltip />
        </RadzenChart>
    </div>

</RadzenStack>

@code {
    [Parameter] public IEnumerable<Valores>? Data { get; set; } = null;

    private IEnumerable<SensorData> ProcessedData { get; set; } = new List<SensorData>();

    private bool showDataLabels = true;
    private bool showMarkers = true;

    protected override async Task OnInitializedAsync()
    {
        await ProcessarDadosPorMinuto();
    }

    private async Task ProcessarDadosPorMinuto()
    {
        IEnumerable<Valores> valores;

        if (Data is null)
        {
            var cacheData = await Cache.GetRecordAsync<IEnumerable<Valores>>(CacheKeys.VALOR_SENSORES) ?? Enumerable.Empty<Valores>();
            if (cacheData.Any())
            {
                valores = cacheData;
            }
            else
            {
                valores = await ValoresRepository.GetUltimosAgrupadosAsync(GraphicParameters.Inicio, GraphicParameters.Agrupamento, GraphicParameters.IntervaloMinuto.GetValueOrDefault());
                await Cache.SetRecordAsync(CacheKeys.VALOR_SENSORES, valores);
            }
        }
        else
        {
            valores = Data;
        }

        ProcessedData = valores.OrderBy(x => x.LeituraEm).Select(d => new SensorData
        {
            Hora = d.LeituraEm.ToLocalTime().ToString("dd/MM/yy"),
            Temperatura = Math.Round(d.temperatura, 2),
            Umidade = Math.Round(d.umidade, 2),
            PPM = Math.Round(d.ppm_MQ2, 2),
            FogoDetectado = d.chamaDetectada ? 1 : 0,
            Co = Math.Round(d.ppm_CO_MQ7, 2)
        }).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private class SensorData
    {
        public string Hora { get; set; } = "";
        public double Temperatura { get; set; }
        public double Umidade { get; set; }
        public double PPM { get; set; }
        public int FogoDetectado { get; set; }
        public double Co { get; set; }
    }
}
