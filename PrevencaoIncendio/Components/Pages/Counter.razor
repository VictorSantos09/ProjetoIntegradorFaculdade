@page "/graficos"
@rendermode InteractiveServer
@using System.Globalization
@using System.Text.Json
@using PrevencaoIncendio.Repositories
@using StackExchange.Redis
@inject NotificationService NotificationService
@inject IDatabase Cache

<PageTitle>Gráficos</PageTitle>

<SensorChartPanel Data="Data"/>

@code {
    class SensorData
    {
        public string Hora { get; set; } = "";
        public double Temperatura { get; set; }
        public double Umidade { get; set; }
        public double PPM { get; set; }
        public bool FogoDetectado { get; set; }
        public bool MonoxidoDetectado { get; set; }
        public int FogoDetectadoValor => FogoDetectado ? 1 : 0;
        public int MonoxidoDetectadoValor => MonoxidoDetectado ? 1 : 0;
    }

    bool smooth = false;
    bool sharedTooltip = true;
    bool showDataLabels = true;
    bool showMarkers = true;
    IEnumerable<SensorData> Data = Enumerable.Empty<SensorData>();
    List<SensorData> DataList = new();

    private readonly IValoresRepository _valoresRepository;

    public Counter(IValoresRepository valoresRepository)
    {
        _valoresRepository = valoresRepository;
    }

    protected override async Task OnInitializedAsync()
    {
        string recordKey = $"SensorData_1";
        var valores = await Cache.GetRecordAsync<IEnumerable<Valores>>(recordKey) ?? [];
        await ProcessarDadosPorMinuto(valores);
    }

    private async Task ProcessarDadosPorMinuto(IEnumerable<Valores> valores)
    {
        if (!valores.Any()) {
			valores = await _valoresRepository.GetLastMinutesGroupedAsync(60);
			await Cache.SetRecordAsync("SensorData_1", valores);
        }

        DataList.Clear();

        foreach (var v in valores)
        {
            var sensorData = new SensorData
                {
                    Hora = v.LeituraEm.ToLocalTime().ToString("HH:mm"), // mostra hora e minuto
                    Temperatura = Math.Round(v.temperatura, 2),
                    Umidade = Math.Round(v.umidade, 2),
                    PPM = Math.Round(v.ppm_MQ2, 2),
                    FogoDetectado = v.chamaDetectada,
                    MonoxidoDetectado = v.coDetectado
                };

            DataList.Add(sensorData);
        }

        Data = DataList;
        await InvokeAsync(StateHasChanged);
    }
}