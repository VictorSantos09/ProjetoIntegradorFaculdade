@page "/"
@rendermode InteractiveServer
@using System.Text.Json
@using Microsoft.Extensions.Options
@using PrevencaoIncendio.Mqtt
@using System.Timers
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@inject DangerParameters dangerParameters
@inject IValoresRepository ValoresRepository

<PageTitle>Inicio</PageTitle>

<RadzenStack Gap="20px">
    <!-- Alerta -->
    <div style="display: flex; flex-wrap: wrap; gap: 16px;">
        @foreach (var alert in Alerts)
        {
            <div style="flex: 1 1 300px;">
                <RadzenAlert Variant="@alert.Variant"
                             AlertStyle="@alert.Style"
                             Size="@alert.Size"
                             Shade="@alert.Shade"
                             Icon="@alert.icon"
                             AllowClose="true">
                    @alert.message
                </RadzenAlert>
            </div>
        }
    </div>

    <!-- ATUAL -->
    <RadzenCardGroup Responsive="@responsive" class="rz-mt-4 rz-mb-4 rz-gap-4">
        @foreach (var card in MetricCards())
        {
            <RadzenCard load Variant="@variant" class="rz-shadow-md rz-rounded-xl rz-p-4" id="@card.Label" MouseEnter="@(args => ShowTooltip(args, card.Tooltip))">
                <RadzenStack Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.SpaceBetween"
                             AlignItems="AlignItems.Center">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H6">@card.Label</RadzenText>
                        @card.ValueContent
                    </RadzenStack>
                    <RadzenIcon Icon="@card.Icon" Style="font-size: 2rem; color: var(--rz-primary);" />
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenCardGroup>

    <!-- MEDIA -->
    <RadzenText TextStyle="TextStyle.Subtitle1">Próxima média será consultada @TempoRestanteFormatado.</RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle2"> O tempo de busca está configurado para cada @TempoBuscaFormatado.</RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle1">Ultima consulta realizada em @_ultimaBuscaMedia.</RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle1">Periodo para busca da média de @dangerParameters.DataInicioMedia.GetValueOrDefault(_buscaPadraoInicialMedia) até @dangerParameters.DataFimMedia.GetValueOrDefault(_buscaPadraoFimMedia).</RadzenText>
    <RadzenCardGroup Responsive="@responsive" class="rz-mt-4 rz-gap-4">
        @foreach (var card in MetricCardsMedias())
        {
            <RadzenCard load Variant="@variant"
                        Style="background-color: var(--rz-base); color: var(--rz-base-900);"
                        class="rz-shadow-md rz-rounded-xl rz-p-4" id="@card.Label"
                        MouseEnter="@(args => ShowTooltip(args, card.Tooltip))">
                <RadzenStack Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.SpaceBetween"
                             AlignItems="AlignItems.Center">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H6">@card.Label</RadzenText>
                        @card.ValueContent
                    </RadzenStack>
                    <RadzenIcon Icon="@card.Icon" Style="font-size: 2rem; color: var(--rz-secondary);" />
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenCardGroup>

    <!-- Botão para limpar -->
    <RadzenStack JustifyContent="JustifyContent.End" class="rz-my-2">
        <RadzenButton Text="Limpar"
                      Icon="clear"
                      Click="@Limpar"
                      ButtonStyle="ButtonStyle.Primary"
                      IsBusy="@limpando" />
    </RadzenStack>


    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenLabel Text="Limpar a cada" />
        <RadzenNumeric TValue="int"
                       @bind-Value="@limparApos"
                       Placeholder="Limpar após"
                       ShowUpDown="true"
                       Style="max-width: 150px;" />
    </RadzenStack>

    <!-- SelectBar visível apenas em telas grandes -->
    <RadzenSelectBar @bind-Value="@density"
                     TextProperty="Text"
                     ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = t.ToString(), Value = t }))"
                     Size="ButtonSize.Medium"
                     Style="max-width: 300px;"
                     class="rz-display-none rz-display-xl-flex" />

    <!-- DropDown visível em telas menores -->
    <RadzenDropDown @bind-Value="@density"
                    TextProperty="Text"
                    ValueProperty="Value"
                    Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = t.ToString(), Value = t }))"
                    Style="max-width: 300px;"
                    class="rz-display-inline-flex rz-display-xl-none" />
    <!-- Grid -->
    <RadzenDataGrid Data="@Leituras"
                    TItem="Valores"
                    Density="@density"
                    AllowPaging="true"
                    AllowColumnReorder="true"
                    AllowColumnResize="true"
                    AllowSorting="true"
                    AllowMultiColumnSorting="true"
                    ShowMultiColumnSortingIndex="true"
                    EmptyText="Nenhuma leitura realizada"
                    ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Valores.LeituraEm)" Title="Leitura em" TextAlign="TextAlign.Center" SortOrder="SortOrder.Descending" OrderIndex="1" />
            <RadzenDataGridColumn Property="@nameof(Valores.temperatura)" Title="Temperatura" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.umidade)" Title="Umidade" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.ppm_MQ2)" Title="PPM" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.chamaDetectada)" Title="Chama / Fogo detectado" TextAlign="TextAlign.Center">
                <Template Context="valor">
                    <RadzenIcon Icon="@(valor.chamaDetectada ? "check_circle" : "cancel")"
                                Style="@(valor.chamaDetectada ? "color:green;" : "color:red;")" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Valores.coDetectado)" Title="Monóxido de carbono detectado" TextAlign="TextAlign.Center">
                <Template Context="valor">
                    <RadzenIcon Icon="@(valor.coDetectado ? "check_circle" : "cancel")"
                                Style="@(valor.coDetectado ? "color:green;" : "color:red;")" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    private const string IconeUmidade = "water_drop";
    private const string IconePPM = "labs";
    private const string IconeFogo = "local_fire_department";
    private const string IconeTemperatura = "device_thermostat";
    private const string IconeCo = "warning";
    bool responsive = true;
    bool alertVisible = false;
    List<Alerta> Alerts = [];
    Variant variant = Variant.Filled;
    Density density = Density.Compact;
    bool limpando = false;
    int limparApos = 100;
    private List<Valores> _Leituras = [];
    private IEnumerable<Valores> Leituras = [];
    private Valores? valorAtual = CriarValorAtualVazio();
    private Valores valorMedia = CriarValorAtualVazio();
    private Timer _timer;
    private DateTime _ultimaBuscaMedia;
    private DateTime _proximaBuscaMedia;
    private DateTime _buscaPadraoInicialMedia = DateTime.Now.AddDays(-1);
    private DateTime _buscaPadraoFimMedia = DateTime.Now;

    private string TempoRestanteFormatado
    {
        get
        {
            var restante = _proximaBuscaMedia - DateTime.Now;
            if (restante.TotalMilliseconds <= 0)
                return "agora";

            var partes = new List<string>();

            if (restante.Hours > 0)
                partes.Add($"{restante.Hours} hora{(restante.Hours == 1 ? "" : "s")}");

            if (restante.Minutes > 0)
                partes.Add($"{restante.Minutes} minuto{(restante.Minutes == 1 ? "" : "s")}");

            if (restante.Hours == 0 && restante.Minutes == 0 && restante.Seconds > 0)
                partes.Add($"{restante.Seconds} segundo{(restante.Seconds == 1 ? "" : "s")}");

            return partes.Count > 0 ? $"em {string.Join(" e ", partes)}" : "em menos de 1 segundo";
        }
    }
    private string TempoBuscaFormatado
    {
        get
        {
            var tempo = TimeSpan.FromMilliseconds(dangerParameters.TempoBuscaMediaMs);
            var partes = new List<string>();

            if (tempo.TotalSeconds < 60)
            {
                partes.Add($"{(int)tempo.TotalSeconds} segundo{(tempo.TotalSeconds == 1 ? "" : "s")}");
            }
            else
            {
                if (tempo.Hours > 0)
                    partes.Add($"{tempo.Hours} hora{(tempo.Hours == 1 ? "" : "s")}");

                if (tempo.Minutes > 0)
                    partes.Add($"{tempo.Minutes} minuto{(tempo.Minutes == 1 ? "" : "s")}");
            }

            return partes.Count > 0
                ? string.Join(" e ", partes)
                : "menos de 1 segundo";
        }
    }



    protected override void OnInitialized()
    {
        MqttMensagem.MensagemRecebida += OnMqttMensagemRecebida;

        _timer = new Timer(dangerParameters.TempoBuscaMediaMs);
        _timer.AutoReset = true;
        _timer.Enabled = true;

        _timer.Elapsed += async (sender, args) =>
        {
            await BuscarMediaValoresAsync();
            await InvokeAsync(StateHasChanged);
        };
        _ = BuscarMediaValoresAsync();
    }

    private async void OnMqttMensagemRecebida(object? sender, MensagemRecebidaEventArgs args)
    {
        try
        {
            if (args.Topico == "sensor/config") return;

            valorAtual = JsonSerializer.Deserialize<Valores?>(args.Mensagem);

            if (valorAtual is not null)
            {
                const sbyte casasDecimais = 2;

                valorAtual.LeituraEm = DateTime.Now;
                valorAtual.temperatura = valorAtual.temperatura;
                valorAtual.umidade = Math.Round(valorAtual.umidade, casasDecimais);
                valorAtual.ppm_MQ2 = Math.Round(valorAtual.ppm_MQ2, casasDecimais);

                VerificarRiscoPerigo(valorAtual);
                VerificarRiscoPerigoMedia();

                _Leituras.Add(valorAtual);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Aviso", "Valor de leitura inválido recebido, verifique.", closeOnClick: true);
            }

            if (_Leituras.Count >= limparApos) _Leituras.Clear();

            Leituras = _Leituras.ToList();

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Erro ao processar a mensagem recebida.", closeOnClick: true);
            Console.WriteLine($"Erro ao processar mensagem MQTT: {ex.Message}");
        }
    }

    private async Task BuscarMediaValoresAsync()
    {
        try
        {
            var valor = await ValoresRepository.GetNextHourAveragesAsync(dangerParameters.DataInicioMedia.GetValueOrDefault(_buscaPadraoInicialMedia), dangerParameters.DataFimMedia.GetValueOrDefault(_buscaPadraoFimMedia));
            if (valor is not null)
            {
                valorMedia = valor;
                VerificarRiscoPerigo(valorMedia);
                _ultimaBuscaMedia = DateTime.Now;
                _proximaBuscaMedia = _ultimaBuscaMedia.AddMilliseconds(dangerParameters.TempoBuscaMediaMs);
            }
            else
            {
                AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Info, AlertSize.Large, Shade.Default, "info", "Nenhuma leitura encontrada para o período selecionado.", AlertLevel.Info));
                valorMedia = CriarValorAtualVazio();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Erro ao consultar os dados.", closeOnClick: true);
            Console.WriteLine($"Erro ao consultar dados: {ex.Message}");
        }
    }

    private void Limpar()
    {
        limpando = true;
        valorAtual = CriarValorAtualVazio();
        _Leituras.Clear();
        Leituras = [];
        limpando = false;
    }
    private IEnumerable<(string Label, RenderFragment ValueContent, string Icon, string? Tooltip)> MetricCards()
    {
        RenderFragment CheckIcon(bool value) => builder =>
        {
            builder.OpenComponent<RadzenIcon>(0);
            builder.AddAttribute(1, "Icon", value ? "check_circle" : "cancel");
            builder.AddAttribute(2, "Style", $"color: {(value ? "green" : "red")}; font-size: 1.5rem;");
            builder.CloseComponent();
        };

        return new[]
        {
            ("Temperatura", @<RadzenText>@($"{valorAtual.temperatura:F2} °C")</RadzenText>, IconeTemperatura, null),
        ("Umidade", @<RadzenText>@($"{valorAtual.umidade:F2} %")</RadzenText>, IconeUmidade, null),
        ("PPM", @<RadzenText>@($"{valorAtual.ppm_MQ2:F2}")</RadzenText>, IconePPM, "Parte por milhão de concentração de gases."),
        ("Chama / Fogo", CheckIcon(valorAtual.chamaDetectada), IconeFogo, "Detecção de chama ou fogo."),
            ("Monóxido de carbono", CheckIcon(valorAtual.coDetectado), IconeCo, "Detecção de monóxido de carbono."),
        }
    ;
}
private IEnumerable<(string Label, RenderFragment ValueContent, string Icon, string? Tooltip)> MetricCardsMedias()
{
    RenderFragment CheckIcon(bool value) => builder =>
    {
        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", value ? "check_circle" : "cancel");
        builder.AddAttribute(2, "Style", $"color: {(value ? "green" : "red")}; font-size: 1.5rem;");
        builder.CloseComponent();
    };

    return new[]
    {
        ("Média - Temperatura", @<RadzenText>@($"{valorMedia.temperatura:F2} °C")</RadzenText>, IconeTemperatura, null),
    ("Média - Umidade", @<RadzenText>@($"{valorMedia.umidade:F2} %")</RadzenText>, IconeUmidade, null),
    ("Média - PPM", @<RadzenText>@($"{valorMedia.ppm_MQ2:F2}")</RadzenText>, IconePPM, "Média de concentração de gases."),
    ("Média - Chama", CheckIcon(valorMedia.chamaDetectada), IconeFogo, "Detecção de chama média."),
        ("Média - Monóxido de carbono", CheckIcon(valorMedia.coDetectado), IconeCo, "Detecção média de monóxido de carbono.")
    }
    ;
    }
    void ShowTooltip(ElementReference elementReference, string? text, TooltipOptions? options = null)
{
    if (options is null)
    {
        options = new TooltipOptions()
        {
            Position = TooltipPosition.Top,
        };
    }
    if (!string.IsNullOrEmpty(text)) tooltipService.Open(elementReference, text, options);
}
private static Valores CriarValorAtualVazio()
{
    return new Valores()
    {
        chamaDetectada = false,
        coDetectado = false,
        ppm_MQ2 = 0,
        temperatura = 0,
        umidade = 0,
        valorAnalogico_MQ2 = 0
    };
}
private void VerificarRiscoPerigo(Valores valores)
{
    // Referência: https://pubs.aip.org/aip/acp/article-abstract/2431/1/090004/2906139/Home-fire-early-warning-system-using-flame-smoke
    NotificationSeverity riscoPerigo = NotificationSeverity.Info;
    bool temPerigo = false;
    const string Icon = "dangerous";

    if (valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, IconeFogo, "Fogo detectado.", AlertLevel.Fire));
    }
    if (valores.coDetectado)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, IconeCo, "Monóxido de carbono detectado.", AlertLevel.Co));
    }

    if (valores.temperatura > dangerParameters.Medio.Temperatura || valores.ppm_MQ2 > dangerParameters.Medio.Ppm && !valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Warning;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Warning, AlertSize.Large, Shade.Default, Icon, "Ambiente em potencial risco, verifique.", AlertLevel.Warning));
    }
    // danger It is dangerous if the temperature sensor detects a temperature above 45°C or the smoke sensor detects smoke levels above 700 ppm and the flame sensor detect fire.
    else if (valores.temperatura > dangerParameters.Alto.Temperatura || valores.ppm_MQ2 > dangerParameters.Alto.Ppm && valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, Icon, "Alto risco de incêndio, verifique imediatamente.", AlertLevel.Danger));
    }

    if (temPerigo)
    {
        NotificationService.Notify(riscoPerigo, "Perigo", "Ambiente fora do normal", closeOnClick: true);
    }
}
private void VerificarRiscoPerigoMedia()
{
    const double margemPercentual = 0.10; // 10%

    VerificarVariacaoRelativa("Temperatura", valorAtual.temperatura, valorMedia.temperatura, margemPercentual, IconeTemperatura, AlertLevel.MediaTemperatura);
    VerificarVariacaoRelativa("Umidade", valorAtual.umidade, valorMedia.umidade, margemPercentual, IconeUmidade, AlertLevel.MediaUmidade);
    VerificarVariacaoRelativa("Fumaça", valorAtual.ppm_MQ2, valorMedia.ppm_MQ2, margemPercentual, IconePPM, AlertLevel.MediaPpm);

    if (valorAtual.coDetectado != valorMedia.coDetectado)
    {
        AddIfNotExists(new Alerta(
            Variant.Filled,
            AlertStyle.Warning,
            AlertSize.Large,
            Shade.Default,
            IconeCo,
            "Mudança no estado de detecção de monóxido de carbono.",
            AlertLevel.Co));
    }

    if (valorAtual.chamaDetectada != valorMedia.chamaDetectada)
    {
        AddIfNotExists(new Alerta(
            Variant.Filled,
            AlertStyle.Warning,
            AlertSize.Large,
            Shade.Default,
            IconeFogo,
            "Mudança no estado de detecção de chama/fogo.",
            AlertLevel.MediaFire));
    }
}


private void VerificarVariacaoRelativa(
    string nomeCampo,
    double valorAtual,
    double valorMedia,
    double percentualTolerado,
    string icone,
    AlertLevel nivelAlerta)
{
    // Se a média for 0, evita divisão por zero e aplica margem absoluta mínima (0.1)
    var margemAbsolutaMinima = 0.1;
    var margem = Math.Max(valorMedia * percentualTolerado, margemAbsolutaMinima);

    if (Math.Abs(valorAtual - valorMedia) > margem)
    {
        AddIfNotExists(new Alerta(
            Variant.Filled,
            AlertStyle.Warning,
            AlertSize.Large,
            Shade.Default,
            icone,
            $"Variação significativa de {nomeCampo.ToLower()} detectada.",
            nivelAlerta));
    }
}


private void AddIfNotExists(Alerta alerta)
{
    if (!Alerts.Exists(x => x.level == alerta.level)) Alerts.Add(alerta);
}
}
