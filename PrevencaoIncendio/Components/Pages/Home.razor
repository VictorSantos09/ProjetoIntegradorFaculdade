@page "/"
@rendermode InteractiveServer
@using System.Text.Json
@using Microsoft.Extensions.Options
@using PrevencaoIncendio.Mqtt
@using System.Timers
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@inject DangerParameters dangerParameters
@inject IValoresRepository ValoresRepository

<PageTitle>Início - Painel de Monitoramento</PageTitle>

<RadzenStack Gap="20px">
    <!-- Alertas ativos -->
    <div class="rz-mb-4" style="display: flex; flex-wrap: wrap; gap: 16px;">
        @foreach (var alert in Alerts)
        {
            <div style="flex: 1 1 300px;" @key="alert.Level">
                <RadzenAlert Variant="@alert.Variant"
                             AlertStyle="@alert.Style"
                             Size="@alert.Size"
                             Shade="@alert.Shade"
                             Icon="@alert.Icon"
                             AllowClose="true"
                             Text="@alert.DataCriacao.ToString("dd/MM/yyyy HH:mm")"
                             Title="@alert.Message"
                             Close="@(() => RemoverAlerta(alert))" />
            </div>
        }
    </div>

    <!-- Leituras em tempo real -->
    <RadzenText TextStyle="TextStyle.H5" Class="rz-mb-2">Leituras em tempo real</RadzenText>
    <RadzenCardGroup Responsive="@responsive" class="rz-gap-4">
        @foreach (var card in MetricCards())
        {
            <RadzenCard load Variant="@variant" class="rz-shadow-md rz-rounded-xl rz-p-4 rz-text-white rz-bg-primary" id="@card.Label" MouseEnter="@(args => ShowTooltip(args, card.Tooltip))">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H6">@card.Label</RadzenText>
                        @card.ValueContent
                    </RadzenStack>
                    <RadzenIcon Icon="@card.Icon" Style="font-size: 2rem;" />
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenCardGroup>

    <!-- Medianas -->
    <RadzenText TextStyle="TextStyle.H5" Class="rz-mt-4">Mediana das leituras</RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle1">Próxima consulta: <b>@TempoRestanteFormatado</b></RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle2">Frequência de busca: <b>@TempoBuscaFormatado</b></RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle2">Período da média: <b>@dangerParameters.DataInicioMedia.GetValueOrDefault(_buscaPadraoInicialMedia).ToString("dd/MM/yyyy HH:mm")</b> a <b>@dangerParameters.DataFimMedia.GetValueOrDefault(_buscaPadraoFimMedia).ToString("dd/MM/yyyy HH:mm")</b></RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle2"><b>Percentual de diferença: @(dangerParameters.PercentualDiferenca * 100)%</b></RadzenText>
    <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-mt-1">
        <i>As medianas são utilizadas por serem menos sensíveis a valores extremos ou leituras atípicas dos sensores, tornando a análise mais robusta e confiável.</i>
    </RadzenText>
    <RadzenCardGroup Responsive="@responsive" class="rz-gap-4 rz-mt-2">
        @foreach (var card in MetricCardsMedias())
        {
            <RadzenCard load Variant="@variant" Style="background-color: var(--rz-base); color: var(--rz-base-900);" class="rz-shadow-md rz-rounded-xl rz-p-4" id="@card.Label" MouseEnter="@(args => ShowTooltip(args, card.Tooltip))">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H6">@card.Label</RadzenText>
                        @card.ValueContent
                    </RadzenStack>
                    <RadzenIcon Icon="@card.Icon" Style="font-size: 2rem; color: var(--rz-secondary);" />
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenCardGroup>

    <!-- Ações e controles -->
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" class="rz-my-4">
        <RadzenButton Text="Limpar leituras"
                      Icon="clear"
                      Click="@Limpar"
                      ButtonStyle="ButtonStyle.Primary"
                      IsBusy="@limpando"
                      Disabled="@limpando"
                      class="rz-mr-2" />

        <RadzenLabel Text="Auto limpar a cada" />
        <RadzenNumeric TValue="int" @bind-Value="@limparApos" Placeholder="Limpar após" ShowUpDown="true" Style="max-width: 100px; margin-left: 10px;" />
    </RadzenStack>

    <!-- Opções de densidade -->
    <RadzenSelectBar @bind-Value="@density"
                     TextProperty="Text"
                     ValueProperty="Value"
                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = t.ToString(), Value = t }))"
                     Size="ButtonSize.Medium"
                     Style="max-width: 300px;" />

    <!-- Grid de leituras -->
    <RadzenDataGrid Data="@Leituras" TItem="Valores" Density="@density"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowColumnResize="true"
                    ShowPagingSummary="true"
                    AllowMultiColumnSorting="true"
                    ShowMultiColumnSortingIndex="true"
                    EmptyText="Nenhuma leitura registrada ainda">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Valores.LeituraEm)" Title="Data e hora" TextAlign="TextAlign.Center" FormatString="{0:dd/MM/yyyy HH:mm}" SortOrder="SortOrder.Descending" OrderIndex="1" />
            <RadzenDataGridColumn Property="@nameof(Valores.temperatura)" Title="Temperatura (°C)" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.umidade)" Title="Umidade" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.ppm_MQ2)" Title="PPM Fumaça" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(Valores.ppm_CO_MQ7)" Title="PPM Co" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Title="Fogo" TextAlign="TextAlign.Center">
                <Template Context="valor">
                    <RadzenIcon Icon="@(valor.chamaDetectada ? "check_circle" : "cancel")"
                                Style="@(valor.chamaDetectada ? "color:green;" : "color:red;")" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>


@code {
    private const string IconeUmidade = "water_drop";
    private const string IconePPM = "labs";
    private const string IconeFogo = "local_fire_department";
    private const string IconeTemperatura = "device_thermostat";
    private const string IconeCo = "warning";
    bool responsive = true;
    bool alertVisible = false;
    List<Alerta> Alerts = [];
    Variant variant = Variant.Filled;
    Density density = Density.Compact;
    bool limpando = false;
    int limparApos = 100;
    private List<Valores> _Leituras = [];
    private IEnumerable<Valores> Leituras = [];
    private Valores? valorAtual = CriarValorAtualVazio();
    private Valores valorMedia = CriarValorAtualVazio();
    private Timer _timer;
    private DateTime _ultimaBuscaMedia;
    private DateTime _proximaBuscaMedia;
    private DateTime _buscaPadraoInicialMedia = DateTime.Now.AddDays(-7);
    private DateTime _buscaPadraoFimMedia = DateTime.Now;
    private string TempoRestanteFormatado
    {
        get
        {
            var restante = _proximaBuscaMedia - DateTime.Now;
            if (restante.TotalMilliseconds <= 0)
                return "agora";

            var partes = new List<string>();

            if (restante.Hours > 0)
                partes.Add($"{restante.Hours} hora{(restante.Hours == 1 ? "" : "s")}");

            if (restante.Minutes > 0)
                partes.Add($"{restante.Minutes} minuto{(restante.Minutes == 1 ? "" : "s")}");

            if (restante.Hours == 0 && restante.Minutes == 0 && restante.Seconds > 0)
                partes.Add($"{restante.Seconds} segundo{(restante.Seconds == 1 ? "" : "s")}");

            return partes.Count > 0 ? $"em {string.Join(" e ", partes)}" : "em menos de 1 segundo";
        }
    }
    private string TempoBuscaFormatado
    {
        get
        {
            var tempo = TimeSpan.FromMilliseconds(dangerParameters.TempoBuscaMediaMs);
            var partes = new List<string>();

            if (tempo.TotalSeconds < 60)
            {
                partes.Add($"{(int)tempo.TotalSeconds} segundo{(tempo.TotalSeconds == 1 ? "" : "s")}");
            }
            else
            {
                if (tempo.Hours > 0)
                    partes.Add($"{tempo.Hours} hora{(tempo.Hours == 1 ? "" : "s")}");

                if (tempo.Minutes > 0)
                    partes.Add($"{tempo.Minutes} minuto{(tempo.Minutes == 1 ? "" : "s")}");
            }

            return partes.Count > 0
                ? string.Join(" e ", partes)
                : "menos de 1 segundo";
        }
    }
    private PeriodicTimer? _periodicTimer;
    private CancellationTokenSource? _cancellationTokenSource;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cancellationTokenSource = new CancellationTokenSource();
            _periodicTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(dangerParameters.TempoBuscaMediaMs));

            _ = Task.Run(async () =>
            {
                while (await _periodicTimer.WaitForNextTickAsync(_cancellationTokenSource.Token))
                {
                    await BuscarMediaValoresAsync();
                    await InvokeAsync(StateHasChanged);
                }
            });

            await BuscarMediaValoresAsync();

            MqttMensagem.MensagemRecebida -= OnMqttMensagemRecebida;
            MqttMensagem.MensagemRecebida += OnMqttMensagemRecebida;
            StateHasChanged();
        }
    }

    private async void OnMqttMensagemRecebida(object? sender, MensagemRecebidaEventArgs args)
    {
        try
        {
            if (args.Topico == "sensor/config") return;

            valorAtual = JsonSerializer.Deserialize<Valores?>(args.Mensagem);

            if (valorAtual is not null)
            {
                const sbyte casasDecimais = 2;

                valorAtual.LeituraEm = DateTime.Now;
                valorAtual.temperatura = valorAtual.temperatura;
                valorAtual.umidade = Math.Round(valorAtual.umidade, casasDecimais);
                valorAtual.ppm_MQ2 = Math.Round(valorAtual.ppm_MQ2, casasDecimais);
                valorAtual.ppm_CO_MQ7 = Math.Round(valorAtual.ppm_CO_MQ7, casasDecimais);

                VerificarRiscoPerigo(valorAtual);
                VerificarRiscoPerigoMedia();

                _Leituras.Add(valorAtual);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Aviso", "Valor de leitura inválido recebido, verifique.", closeOnClick: true);
            }

            if (_Leituras.Count >= limparApos) _Leituras.Clear();

            Leituras = _Leituras.ToList();

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Erro ao processar a mensagem recebida.", closeOnClick: true);
            Console.WriteLine($"Erro ao processar mensagem MQTT: {ex.Message}");
        }
    }

    private void RemoverAlerta(Alerta alerta)
    {
        var alertaExistente = Alerts.FirstOrDefault(a => a.Level == alerta.Level && a.Message == alerta.Message);
        if (alertaExistente is not null)
        {
            Alerts.Remove(alertaExistente);
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(summary: "Erro", detail: "Não foi possível deletar o alerta.");
        }
    }

    private async Task BuscarMediaValoresAsync()
    {
        try
        {
            var valor = await ValoresRepository.GetNextMediansAsync(dangerParameters.DataInicioMedia.GetValueOrDefault(_buscaPadraoInicialMedia), dangerParameters.DataFimMedia.GetValueOrDefault(_buscaPadraoFimMedia));
            if (valor is not null)
            {
                valorMedia = valor;
                VerificarRiscoPerigo(valorMedia);
                _ultimaBuscaMedia = DateTime.Now;
                _proximaBuscaMedia = _ultimaBuscaMedia.AddMilliseconds(dangerParameters.TempoBuscaMediaMs);
            }
            else
            {
                AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Info, AlertSize.Large, Shade.Default, "info", "Nenhuma leitura encontrada para o período selecionado.", AlertLevel.Info));
                valorMedia = CriarValorAtualVazio();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Erro ao consultar os dados.", closeOnClick: true);
            Console.WriteLine($"Erro ao consultar dados: {ex.Message}");
        }
    }

    private void Limpar()
    {
        limpando = true;
        valorAtual = CriarValorAtualVazio();
        _Leituras.Clear();
        Leituras = [];
        limpando = false;
    }
    private IEnumerable<(string Label, RenderFragment ValueContent, string Icon, string? Tooltip)> MetricCards()
    {
        RenderFragment CheckIcon(bool value) => builder =>
        {
            builder.OpenComponent<RadzenIcon>(0);
            builder.AddAttribute(1, "Icon", value ? "check_circle" : "cancel");
            builder.AddAttribute(2, "Style", $"color: {(value ? "green" : "red")}; font-size: 1.5rem;");
            builder.CloseComponent();
        };

        return new[]
        {
            ("Temperatura", @<RadzenText>@($"{valorAtual.temperatura:F2} °C")</RadzenText>, IconeTemperatura, null),
        ("Umidade", @<RadzenText>@($"{valorAtual.umidade:F2} %")</RadzenText>, IconeUmidade, null),
        ("PPM Fumaça", @<RadzenText>@($"{valorAtual.ppm_MQ2:F2}")</RadzenText>, IconePPM, "Parte por milhão de concentração de gases."),
        ("PPM Co", @<RadzenText>@($"{valorAtual.ppm_CO_MQ7:F2}")</RadzenText>, IconeCo, "Parte por milhão de concentração de carbono."),
        ("Chama / Fogo", CheckIcon(valorAtual.chamaDetectada), IconeFogo, "Detecção de chama ou fogo."),
        }
    ;
}
private IEnumerable<(string Label, RenderFragment ValueContent, string Icon, string? Tooltip)> MetricCardsMedias()
{
    RenderFragment CheckIcon(bool value) => builder =>
    {
        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", value ? "check_circle" : "cancel");
        builder.AddAttribute(2, "Style", $"color: {(value ? "green" : "red")}; font-size: 1.5rem;");
        builder.CloseComponent();
    };

    return new[]
    {
        ("Temperatura", @<RadzenText>@($"{valorMedia.temperatura:F2} °C")</RadzenText>, IconeTemperatura, null),
    ("Umidade", @<RadzenText>@($"{valorMedia.umidade:F2} %")</RadzenText>, IconeUmidade, null),
    ("PPM Fumaça", @<RadzenText>@($"{valorMedia.ppm_MQ2:F2}")</RadzenText>, IconePPM, "Média de concentração de gases."),
    ("PPM Co", @<RadzenText>@($"{valorMedia.ppm_CO_MQ7:F2}")</RadzenText>, IconeCo, "Média de monóxido de carbono."),
("Chama / Fogo", CheckIcon(valorMedia.chamaDetectada), IconeFogo, "Detecção de chama média."),
    }
;
    }
    void ShowTooltip(ElementReference elementReference, string? text, TooltipOptions? options = null)
{
    if (options is null)
    {
        options = new TooltipOptions()
        {
            Position = TooltipPosition.Top,
        };
    }
    if (!string.IsNullOrEmpty(text)) tooltipService.Open(elementReference, text, options);
}
private static Valores CriarValorAtualVazio()
{
    return new Valores()
    {
        chamaDetectada = false,
        ppm_CO_MQ7 = 0,
        ppm_MQ2 = 0,
        temperatura = 0,
        umidade = 0,
    };
}
private void VerificarRiscoPerigo(Valores valores)
{
    // Referência: https://pubs.aip.org/aip/acp/article-abstract/2431/1/090004/2906139/Home-fire-early-warning-system-using-flame-smoke
    NotificationSeverity riscoPerigo = NotificationSeverity.Info;
    bool temPerigo = false;
    const string Icon = "dangerous";

    if (valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, IconeFogo, "Fogo detectado.", AlertLevel.Fire));
    }
    if (valores.ppm_CO_MQ7 >= dangerParameters.Co)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, IconeCo, "Monóxido de carbono detectado.", AlertLevel.Co));
    }

    if (valores.temperatura > dangerParameters.Medio.Temperatura || valores.ppm_MQ2 > dangerParameters.Medio.Ppm && !valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Warning;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Warning, AlertSize.Large, Shade.Default, Icon, "Ambiente em potencial risco, verifique.", AlertLevel.Warning));
    }
    else if (valores.temperatura > dangerParameters.Alto.Temperatura || valores.ppm_MQ2 > dangerParameters.Alto.Ppm && valores.chamaDetectada)
    {
        temPerigo = true;
        riscoPerigo = NotificationSeverity.Error;

        AddIfNotExists(new Alerta(Variant.Filled, AlertStyle.Danger, AlertSize.Large, Shade.Default, Icon, "Alto risco de incêndio, verifique imediatamente.", AlertLevel.Danger));
    }

    if (temPerigo)
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = riscoPerigo,
            Summary = "Perigo",
            Detail = "Ambiente fora do normal",
            Duration = 4000,
            CloseOnClick = true,
            Style = "position: fixed; top: 1rem; left: 1rem; z-index: 9999;"
        });

    }
}
private void VerificarRiscoPerigoMedia()
{
    var margemPercentual = dangerParameters.PercentualDiferenca;
    VerificarVariacaoRelativa("Temperatura", valorAtual.temperatura, valorMedia.temperatura, margemPercentual, IconeTemperatura, AlertLevel.MediaTemperatura);
    VerificarVariacaoRelativa("Umidade", valorAtual.umidade, valorMedia.umidade, margemPercentual, IconeUmidade, AlertLevel.MediaUmidade);
    VerificarVariacaoRelativa("Fumaça", valorAtual.ppm_MQ2, valorMedia.ppm_MQ2, margemPercentual, IconePPM, AlertLevel.MediaPpm);
    VerificarVariacaoRelativa("Monóxido de carbono", valorAtual.ppm_CO_MQ7, valorMedia.ppm_CO_MQ7, margemPercentual, IconeCo, AlertLevel.MediaCo);

    if (valorAtual.chamaDetectada != valorMedia.chamaDetectada)
    {
        AddIfNotExists(new Alerta(
            Variant.Filled,
            AlertStyle.Warning,
            AlertSize.Large,
            Shade.Default,
            IconeFogo,
            "Estado de chama/fogo diferente da média.",
            AlertLevel.MediaFire));
    }
}

private void VerificarVariacaoRelativa(
    string nomeCampo,
    double valorAtual,
    double valorMedia,
    double percentualTolerado,
    string icone,
    AlertLevel nivelAlerta)
{
    // Se a média for 0, evita divisão por zero e aplica margem absoluta mínima (0.1)
    var margemAbsolutaMinima = 0.1;
    var margem = Math.Max(valorMedia * percentualTolerado, margemAbsolutaMinima);

    if (Math.Abs(valorAtual - valorMedia) > margem)
    {
        AddIfNotExists(new Alerta(
            Variant.Filled,
            AlertStyle.Warning,
            AlertSize.Large,
            Shade.Default,
            icone,
            $"Estado de {nomeCampo.ToLower()} diferente da média.",
            nivelAlerta));
    }
}


private void AddIfNotExists(Alerta alerta)
{
    if (!Alerts.Exists(x => x.Level == alerta.Level)) Alerts.Add(alerta);
}
}
